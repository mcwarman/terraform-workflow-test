name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure Terraform Provider Plugin Cache
        run: |
          plugin_cache_dir="$HOME/.terraform.d/plugin-cache"
          printf 'plugin_cache_dir="%s"' "${plugin_cache_dir}" > ~/.terraformrc
          mkdir --parents "${plugin_cache_dir}"

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3

      - name: TFLint
        id: tflint
        run: tflint -f compact

      - name: Terraform Format
        id: fmt
        run: terraform fmt -no-color -check -diff -recursive

      - name: Terraform Init
        id: init
        run: terraform init -no-color -lockfile=readonly

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Update Git Step Summary
        id: report
        if: success() || failure()
        env:
          tflint_outcome: ${{ steps.tflint.outcome }}
          fmt_outcome: ${{ steps.fmt.outcome }}
          init_outcome: ${{ steps.init.outcome }}
          validate_outcome: ${{ steps.validate.outcome }}
          plan_outcome: ${{ steps.plan.outcome }}
          plan_stdout: ${{ steps.plan.outputs.stdout }}
        run: |
          {
            printf "#### TFLint :microscope: \`%s\`\n\n" "${tflint_outcome}";
            printf "#### Terraform Format and Style :pencil2: \`%s\`\n\n" "${fmt_outcome}";
            printf "#### Terraform Initialization :gear: \`%s\`\n\n" "${init_outcome}";
            printf "#### Terraform Validation :clipboard: \`%s\`\n\n" "${validate_outcome}";
            printf "#### Terraform Plan :book: \`%s\`\n\n" "${plan_outcome}";
            printf "<details><summary>Show Plan</summary>\n\n";
            printf "\`\`\`\n%s\n\`\`\`\n\n" "${plan_stdout}";
            printf "</details>\n\n";
          } > "$GITHUB_STEP_SUMMARY"

          eof=$(head -c15 /dev/urandom | base64)
          {
            printf "markdown<<%s\n" "${eof}";
            cat "$GITHUB_STEP_SUMMARY";
            printf "%s\n" "${eof}";
          } >> "$GITHUB_OUTPUT"

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: (success() || failure()) && github.event_name == 'pull_request'
        env:
          markdown: ${{ steps.report.outputs.markdown }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `${process.env.markdown}`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Encrypt plan
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name == 'push'
        run: gpg --quiet --symmetric --cipher-algo AES256 --batch --yes --passphrase '${{ secrets.TF_PLAN_PASSPHRASE }}' --output tfplan.gpg tfplan

      - name: Upload plan
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan.gpg
          retention-days: 1

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    environment: default
    needs: terraform-plan
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure Terraform Provider Plugin Cache
        run: |
          plugin_cache_dir="$HOME/.terraform.d/plugin-cache"
          printf 'plugin_cache_dir="%s"' "${plugin_cache_dir}" > ~/.terraformrc
          mkdir --parents "${plugin_cache_dir}"

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan

      - name: Decrypt plan
        run: gpg --quiet --batch --yes --decrypt --passphrase '${{ secrets.TF_PLAN_PASSPHRASE }}' --output tfplan tfplan.gpg

      - name: Terraform Init
        id: init
        run: terraform init -no-color -lockfile=readonly

      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false tfplan

      - name: Update Git Step Summary
        id: report
        if: success() || failure()
        env:
          init_outcome: ${{ steps.init.outcome }}
          apply_outcome: ${{ steps.apply.outcome }}
          apply_stdout: ${{ steps.apply.outputs.stdout }}
        run: |
          {
            printf "#### Terraform Initialization :gear: \`%s\`\n\n" "${init_outcome}";
            printf "#### Terraform Apply :rocket: \`%s\`\n\n" "${apply_outcome}";
            printf "<details><summary>Show Outcome</summary>\n\n";
            printf "\`\`\`\n%s\n\`\`\`\n\n" "${apply_stdout}";
            printf "</details>\n\n";
          } > "$GITHUB_STEP_SUMMARY"
